{"env_info": "sys.platform: linux\nPython: 3.8.10 (default, Jun  4 2021, 15:09:15) [GCC 7.5.0]\nCUDA available: True\nGPU 0: NVIDIA GeForce RTX 3060 Laptop GPU\nCUDA_HOME: /usr/local/cuda\nNVCC: Cuda compilation tools, release 11.6, V11.6.55\nGCC: gcc (Ubuntu 9.4.0-1ubuntu1~20.04.1) 9.4.0\nPyTorch: 1.12.0\nPyTorch compiling details: PyTorch built with:\n  - GCC 9.3\n  - C++ Version: 201402\n  - Intel(R) oneAPI Math Kernel Library Version 2021.4-Product Build 20210904 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - LAPACK is enabled (usually provided by MKL)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 11.6\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=compute_37\n  - CuDNN 8.3.2  (built against CUDA 11.5)\n  - Magma 2.6.1\n  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.6, CUDNN_VERSION=8.3.2, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.12.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=OFF, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, \n\nTorchVision: 0.13.0\nOpenCV: 4.7.0\nMMCV: 1.7.1\nMMCV Compiler: GCC 9.3\nMMCV CUDA Compiler: 11.6\nMMClassification: 0.25.0+3d4f80d", "seed": 2023184938, "mmcls_version": "0.25.0", "config": "model = dict(\n    type='ImageClassifier',\n    backbone=dict(type='MobileNetV2', widen_factor=1.0),\n    neck=dict(type='GlobalAveragePooling'),\n    head=dict(\n        type='LinearClsHead',\n        num_classes=5,\n        in_channels=1280,\n        loss=dict(type='CrossEntropyLoss', loss_weight=1.0),\n        topk=(1, 5)))\ndataset_type = 'CustomDataset'\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='RandomResizedCrop', size=224, backend='pillow'),\n    dict(type='RandomFlip', flip_prob=0.5, direction='horizontal'),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='ImageToTensor', keys=['img']),\n    dict(type='ToTensor', keys=['gt_label']),\n    dict(type='Collect', keys=['img', 'gt_label'])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='Resize', size=(256, -1), backend='pillow'),\n    dict(type='CenterCrop', crop_size=224),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='ImageToTensor', keys=['img']),\n    dict(type='Collect', keys=['img'])\n]\ndata = dict(\n    samples_per_gpu=32,\n    workers_per_gpu=1,\n    train=dict(\n        type='CustomDataset',\n        data_prefix='data/',\n        ann_file='data/flower_dataset/train.txt',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='RandomResizedCrop', size=224, backend='pillow'),\n            dict(type='RandomFlip', flip_prob=0.5, direction='horizontal'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='ToTensor', keys=['gt_label']),\n            dict(type='Collect', keys=['img', 'gt_label'])\n        ]),\n    val=dict(\n        type='CustomDataset',\n        data_prefix='data/',\n        ann_file='data/flower_dataset/val.txt',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='Resize', size=(256, -1), backend='pillow'),\n            dict(type='CenterCrop', crop_size=224),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ]),\n    test=dict(\n        type='CustomDataset',\n        data_prefix='data/',\n        ann_file='data/flower_dataset/val.txt',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='Resize', size=(256, -1), backend='pillow'),\n            dict(type='CenterCrop', crop_size=224),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ]))\nevaluation = dict(interval=1, metric='accuracy')\noptimizer = dict(type='SGD', lr=0.0005, momentum=0.9, weight_decay=4e-05)\noptimizer_config = dict(grad_clip=None)\nlr_config = dict(policy='step', gamma=0.98, step=1)\nrunner = dict(type='EpochBasedRunner', max_epochs=15)\ncheckpoint_config = dict(interval=1)\nlog_config = dict(interval=15, hooks=[dict(type='TextLoggerHook')])\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = 'mobilenet_v2_batch256_imagenet_20200708-3b2dc3af.pth'\nresume_from = None\nworkflow = [('train', 1)]\nwork_dir = 'flower'\ngpu_ids = [0]\ndevice = 'cuda'\nseed = 2023184938\n", "CLASSES": null}
{"mode": "train", "epoch": 1, "iter": 15, "lr": 0.0005, "memory": 2457, "data_time": 0.14358, "loss": 1.47135, "time": 0.32346}
{"mode": "train", "epoch": 1, "iter": 30, "lr": 0.0005, "memory": 2457, "data_time": 0.00304, "loss": 1.0113, "time": 0.08386}
{"mode": "train", "epoch": 1, "iter": 45, "lr": 0.0005, "memory": 2457, "data_time": 0.00303, "loss": 0.71541, "time": 0.08041}
{"mode": "train", "epoch": 1, "iter": 60, "lr": 0.0005, "memory": 2457, "data_time": 0.00282, "loss": 0.51425, "time": 0.08}
{"mode": "val", "epoch": 1, "iter": 18, "lr": 0.0005, "accuracy_top-1": 93.53147, "accuracy_top-5": 100.0}
{"mode": "train", "epoch": 2, "iter": 15, "lr": 0.00049, "memory": 2457, "data_time": 0.14343, "loss": 0.45756, "time": 0.21793}
{"mode": "train", "epoch": 2, "iter": 30, "lr": 0.00049, "memory": 2457, "data_time": 0.00304, "loss": 0.34815, "time": 0.0804}
{"mode": "train", "epoch": 2, "iter": 45, "lr": 0.00049, "memory": 2457, "data_time": 0.00302, "loss": 0.31563, "time": 0.08035}
{"mode": "train", "epoch": 2, "iter": 60, "lr": 0.00049, "memory": 2457, "data_time": 0.00303, "loss": 0.32061, "time": 0.08032}
{"mode": "val", "epoch": 2, "iter": 18, "lr": 0.00049, "accuracy_top-1": 93.35664, "accuracy_top-5": 100.0}
{"mode": "train", "epoch": 3, "iter": 15, "lr": 0.00048, "memory": 2457, "data_time": 0.14602, "loss": 0.28514, "time": 0.21783}
{"mode": "train", "epoch": 3, "iter": 30, "lr": 0.00048, "memory": 2457, "data_time": 0.00302, "loss": 0.31947, "time": 0.08037}
{"mode": "train", "epoch": 3, "iter": 45, "lr": 0.00048, "memory": 2457, "data_time": 0.00298, "loss": 0.27635, "time": 0.08054}
{"mode": "train", "epoch": 3, "iter": 60, "lr": 0.00048, "memory": 2457, "data_time": 0.00302, "loss": 0.2451, "time": 0.08037}
{"mode": "val", "epoch": 3, "iter": 18, "lr": 0.00048, "accuracy_top-1": 94.75525, "accuracy_top-5": 100.0}
{"mode": "train", "epoch": 4, "iter": 15, "lr": 0.00047, "memory": 2457, "data_time": 0.14852, "loss": 0.25522, "time": 0.21809}
{"mode": "train", "epoch": 4, "iter": 30, "lr": 0.00047, "memory": 2457, "data_time": 0.00318, "loss": 0.25685, "time": 0.08045}
{"mode": "train", "epoch": 4, "iter": 45, "lr": 0.00047, "memory": 2457, "data_time": 0.00303, "loss": 0.23475, "time": 0.08011}
{"mode": "train", "epoch": 4, "iter": 60, "lr": 0.00047, "memory": 2457, "data_time": 0.00302, "loss": 0.27739, "time": 0.08057}
{"mode": "val", "epoch": 4, "iter": 18, "lr": 0.00047, "accuracy_top-1": 94.93007, "accuracy_top-5": 100.0}
{"mode": "train", "epoch": 5, "iter": 15, "lr": 0.00046, "memory": 2457, "data_time": 0.15883, "loss": 0.22404, "time": 0.21783}
{"mode": "train", "epoch": 5, "iter": 30, "lr": 0.00046, "memory": 2457, "data_time": 0.00283, "loss": 0.25706, "time": 0.08027}
{"mode": "train", "epoch": 5, "iter": 45, "lr": 0.00046, "memory": 2457, "data_time": 0.00303, "loss": 0.22645, "time": 0.08037}
{"mode": "train", "epoch": 5, "iter": 60, "lr": 0.00046, "memory": 2457, "data_time": 0.00303, "loss": 0.21203, "time": 0.08052}
{"mode": "val", "epoch": 5, "iter": 18, "lr": 0.00046, "accuracy_top-1": 94.58042, "accuracy_top-5": 100.0}
{"mode": "train", "epoch": 6, "iter": 15, "lr": 0.00045, "memory": 2457, "data_time": 0.15142, "loss": 0.19144, "time": 0.21862}
{"mode": "train", "epoch": 6, "iter": 30, "lr": 0.00045, "memory": 2457, "data_time": 0.00302, "loss": 0.26523, "time": 0.08012}
{"mode": "train", "epoch": 6, "iter": 45, "lr": 0.00045, "memory": 2457, "data_time": 0.00303, "loss": 0.19718, "time": 0.08019}
{"mode": "train", "epoch": 6, "iter": 60, "lr": 0.00045, "memory": 2457, "data_time": 0.00294, "loss": 0.19149, "time": 0.08002}
{"mode": "val", "epoch": 6, "iter": 18, "lr": 0.00045, "accuracy_top-1": 94.93007, "accuracy_top-5": 100.0}
{"mode": "train", "epoch": 7, "iter": 15, "lr": 0.00044, "memory": 2457, "data_time": 0.14429, "loss": 0.21656, "time": 0.21896}
{"mode": "train", "epoch": 7, "iter": 30, "lr": 0.00044, "memory": 2457, "data_time": 0.00302, "loss": 0.17163, "time": 0.08032}
{"mode": "train", "epoch": 7, "iter": 45, "lr": 0.00044, "memory": 2457, "data_time": 0.00312, "loss": 0.19906, "time": 0.08046}
{"mode": "train", "epoch": 7, "iter": 60, "lr": 0.00044, "memory": 2457, "data_time": 0.00303, "loss": 0.19262, "time": 0.08021}
{"mode": "val", "epoch": 7, "iter": 18, "lr": 0.00044, "accuracy_top-1": 95.1049, "accuracy_top-5": 100.0}
{"mode": "train", "epoch": 8, "iter": 15, "lr": 0.00043, "memory": 2457, "data_time": 0.15144, "loss": 0.21798, "time": 0.21918}
{"mode": "train", "epoch": 8, "iter": 30, "lr": 0.00043, "memory": 2457, "data_time": 0.00303, "loss": 0.17935, "time": 0.08061}
{"mode": "train", "epoch": 8, "iter": 45, "lr": 0.00043, "memory": 2457, "data_time": 0.00297, "loss": 0.16321, "time": 0.0802}
{"mode": "train", "epoch": 8, "iter": 60, "lr": 0.00043, "memory": 2457, "data_time": 0.00304, "loss": 0.18653, "time": 0.08029}
{"mode": "val", "epoch": 8, "iter": 18, "lr": 0.00043, "accuracy_top-1": 95.62937, "accuracy_top-5": 100.0}
{"mode": "train", "epoch": 9, "iter": 15, "lr": 0.00043, "memory": 2457, "data_time": 0.14928, "loss": 0.15152, "time": 0.21834}
{"mode": "train", "epoch": 9, "iter": 30, "lr": 0.00043, "memory": 2457, "data_time": 0.00303, "loss": 0.14835, "time": 0.08057}
{"mode": "train", "epoch": 9, "iter": 45, "lr": 0.00043, "memory": 2457, "data_time": 0.00281, "loss": 0.196, "time": 0.08045}
{"mode": "train", "epoch": 9, "iter": 60, "lr": 0.00043, "memory": 2457, "data_time": 0.00305, "loss": 0.18242, "time": 0.08036}
{"mode": "val", "epoch": 9, "iter": 18, "lr": 0.00043, "accuracy_top-1": 94.75525, "accuracy_top-5": 100.0}
{"mode": "train", "epoch": 10, "iter": 15, "lr": 0.00042, "memory": 2457, "data_time": 0.15727, "loss": 0.1951, "time": 0.21881}
{"mode": "train", "epoch": 10, "iter": 30, "lr": 0.00042, "memory": 2457, "data_time": 0.00627, "loss": 0.13934, "time": 0.08239}
{"mode": "train", "epoch": 10, "iter": 45, "lr": 0.00042, "memory": 2457, "data_time": 0.00301, "loss": 0.15591, "time": 0.08082}
{"mode": "train", "epoch": 10, "iter": 60, "lr": 0.00042, "memory": 2457, "data_time": 0.00288, "loss": 0.15811, "time": 0.08032}
{"mode": "val", "epoch": 10, "iter": 18, "lr": 0.00042, "accuracy_top-1": 94.75525, "accuracy_top-5": 100.0}
{"mode": "train", "epoch": 11, "iter": 15, "lr": 0.00041, "memory": 2457, "data_time": 0.14644, "loss": 0.14787, "time": 0.21858}
{"mode": "train", "epoch": 11, "iter": 30, "lr": 0.00041, "memory": 2457, "data_time": 0.00305, "loss": 0.12089, "time": 0.08036}
{"mode": "train", "epoch": 11, "iter": 45, "lr": 0.00041, "memory": 2457, "data_time": 0.00329, "loss": 0.13848, "time": 0.08239}
{"mode": "train", "epoch": 11, "iter": 60, "lr": 0.00041, "memory": 2457, "data_time": 0.0029, "loss": 0.17692, "time": 0.08295}
{"mode": "val", "epoch": 11, "iter": 18, "lr": 0.00041, "accuracy_top-1": 95.62937, "accuracy_top-5": 100.0}
{"mode": "train", "epoch": 12, "iter": 15, "lr": 0.0004, "memory": 2457, "data_time": 0.14645, "loss": 0.15444, "time": 0.21958}
{"mode": "train", "epoch": 12, "iter": 30, "lr": 0.0004, "memory": 2457, "data_time": 0.00311, "loss": 0.14542, "time": 0.08109}
{"mode": "train", "epoch": 12, "iter": 45, "lr": 0.0004, "memory": 2457, "data_time": 0.00285, "loss": 0.18278, "time": 0.08287}
{"mode": "train", "epoch": 12, "iter": 60, "lr": 0.0004, "memory": 2457, "data_time": 0.00302, "loss": 0.15603, "time": 0.08172}
{"mode": "val", "epoch": 12, "iter": 18, "lr": 0.0004, "accuracy_top-1": 95.8042, "accuracy_top-5": 100.0}
{"mode": "train", "epoch": 13, "iter": 15, "lr": 0.00039, "memory": 2457, "data_time": 0.15412, "loss": 0.11653, "time": 0.22017}
{"mode": "train", "epoch": 13, "iter": 30, "lr": 0.00039, "memory": 2457, "data_time": 0.00304, "loss": 0.14744, "time": 0.08302}
{"mode": "train", "epoch": 13, "iter": 45, "lr": 0.00039, "memory": 2457, "data_time": 0.00303, "loss": 0.12018, "time": 0.08139}
{"mode": "train", "epoch": 13, "iter": 60, "lr": 0.00039, "memory": 2457, "data_time": 0.00302, "loss": 0.15429, "time": 0.08088}
{"mode": "val", "epoch": 13, "iter": 18, "lr": 0.00039, "accuracy_top-1": 94.93007, "accuracy_top-5": 100.0}
{"mode": "train", "epoch": 14, "iter": 15, "lr": 0.00038, "memory": 2457, "data_time": 0.14958, "loss": 0.1175, "time": 0.21893}
{"mode": "train", "epoch": 14, "iter": 30, "lr": 0.00038, "memory": 2457, "data_time": 0.00322, "loss": 0.16541, "time": 0.08256}
{"mode": "train", "epoch": 14, "iter": 45, "lr": 0.00038, "memory": 2457, "data_time": 0.003, "loss": 0.1508, "time": 0.08257}
{"mode": "train", "epoch": 14, "iter": 60, "lr": 0.00038, "memory": 2457, "data_time": 0.00298, "loss": 0.15061, "time": 0.08157}
{"mode": "val", "epoch": 14, "iter": 18, "lr": 0.00038, "accuracy_top-1": 96.32867, "accuracy_top-5": 100.0}
{"mode": "train", "epoch": 15, "iter": 15, "lr": 0.00038, "memory": 2457, "data_time": 0.14958, "loss": 0.13304, "time": 0.2186}
{"mode": "train", "epoch": 15, "iter": 30, "lr": 0.00038, "memory": 2457, "data_time": 0.00304, "loss": 0.10636, "time": 0.08055}
{"mode": "train", "epoch": 15, "iter": 45, "lr": 0.00038, "memory": 2457, "data_time": 0.00304, "loss": 0.15432, "time": 0.08121}
{"mode": "train", "epoch": 15, "iter": 60, "lr": 0.00038, "memory": 2457, "data_time": 0.00319, "loss": 0.13021, "time": 0.08327}
{"mode": "val", "epoch": 15, "iter": 18, "lr": 0.00038, "accuracy_top-1": 95.97902, "accuracy_top-5": 100.0}
