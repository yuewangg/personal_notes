{"env_info": "sys.platform: linux\nPython: 3.8.10 (default, Jun  4 2021, 15:09:15) [GCC 7.5.0]\nCUDA available: True\nGPU 0: NVIDIA GeForce RTX 3060 Laptop GPU\nCUDA_HOME: /usr/local/cuda\nNVCC: Cuda compilation tools, release 11.6, V11.6.55\nGCC: gcc (Ubuntu 9.4.0-1ubuntu1~20.04.1) 9.4.0\nPyTorch: 1.12.0\nPyTorch compiling details: PyTorch built with:\n  - GCC 9.3\n  - C++ Version: 201402\n  - Intel(R) oneAPI Math Kernel Library Version 2021.4-Product Build 20210904 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - LAPACK is enabled (usually provided by MKL)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 11.6\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=compute_37\n  - CuDNN 8.3.2  (built against CUDA 11.5)\n  - Magma 2.6.1\n  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.6, CUDNN_VERSION=8.3.2, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.12.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=OFF, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, \n\nTorchVision: 0.13.0\nOpenCV: 4.7.0\nMMCV: 1.7.1\nMMCV Compiler: GCC 9.3\nMMCV CUDA Compiler: 11.6\nMMDetection: 2.28.0+1b7d778", "config": "model = dict(\n    type='MaskRCNN',\n    backbone=dict(\n        type='ResNet',\n        depth=50,\n        num_stages=4,\n        out_indices=(0, 1, 2, 3),\n        frozen_stages=1,\n        norm_cfg=dict(type='BN', requires_grad=True),\n        norm_eval=True,\n        style='pytorch',\n        init_cfg=dict(type='Pretrained',\n                      checkpoint='./resnet50-0676ba61.pth')),\n    neck=dict(\n        type='FPN',\n        in_channels=[256, 512, 1024, 2048],\n        out_channels=256,\n        num_outs=5),\n    rpn_head=dict(\n        type='RPNHead',\n        in_channels=256,\n        feat_channels=256,\n        anchor_generator=dict(\n            type='AnchorGenerator',\n            scales=[8],\n            ratios=[0.5, 1.0, 2.0],\n            strides=[4, 8, 16, 32, 64]),\n        bbox_coder=dict(\n            type='DeltaXYWHBBoxCoder',\n            target_means=[0.0, 0.0, 0.0, 0.0],\n            target_stds=[1.0, 1.0, 1.0, 1.0]),\n        loss_cls=dict(\n            type='CrossEntropyLoss', use_sigmoid=True, loss_weight=1.0),\n        loss_bbox=dict(type='L1Loss', loss_weight=1.0)),\n    roi_head=dict(\n        type='StandardRoIHead',\n        bbox_roi_extractor=dict(\n            type='SingleRoIExtractor',\n            roi_layer=dict(type='RoIAlign', output_size=7, sampling_ratio=0),\n            out_channels=256,\n            featmap_strides=[4, 8, 16, 32]),\n        bbox_head=dict(\n            type='Shared2FCBBoxHead',\n            in_channels=256,\n            fc_out_channels=1024,\n            roi_feat_size=7,\n            num_classes=1,\n            bbox_coder=dict(\n                type='DeltaXYWHBBoxCoder',\n                target_means=[0.0, 0.0, 0.0, 0.0],\n                target_stds=[0.1, 0.1, 0.2, 0.2]),\n            reg_class_agnostic=False,\n            loss_cls=dict(\n                type='CrossEntropyLoss', use_sigmoid=False, loss_weight=1.0),\n            loss_bbox=dict(type='L1Loss', loss_weight=1.0)),\n        mask_roi_extractor=dict(\n            type='SingleRoIExtractor',\n            roi_layer=dict(type='RoIAlign', output_size=14, sampling_ratio=0),\n            out_channels=256,\n            featmap_strides=[4, 8, 16, 32]),\n        mask_head=dict(\n            type='FCNMaskHead',\n            num_convs=4,\n            in_channels=256,\n            conv_out_channels=256,\n            num_classes=1,\n            loss_mask=dict(\n                type='CrossEntropyLoss', use_mask=True, loss_weight=1.0))),\n    train_cfg=dict(\n        rpn=dict(\n            assigner=dict(\n                type='MaxIoUAssigner',\n                pos_iou_thr=0.7,\n                neg_iou_thr=0.3,\n                min_pos_iou=0.3,\n                match_low_quality=True,\n                ignore_iof_thr=-1),\n            sampler=dict(\n                type='RandomSampler',\n                num=256,\n                pos_fraction=0.5,\n                neg_pos_ub=-1,\n                add_gt_as_proposals=False),\n            allowed_border=-1,\n            pos_weight=-1,\n            debug=False),\n        rpn_proposal=dict(\n            nms_pre=2000,\n            max_per_img=1000,\n            nms=dict(type='nms', iou_threshold=0.7),\n            min_bbox_size=0),\n        rcnn=dict(\n            assigner=dict(\n                type='MaxIoUAssigner',\n                pos_iou_thr=0.5,\n                neg_iou_thr=0.5,\n                min_pos_iou=0.5,\n                match_low_quality=True,\n                ignore_iof_thr=-1),\n            sampler=dict(\n                type='RandomSampler',\n                num=512,\n                pos_fraction=0.25,\n                neg_pos_ub=-1,\n                add_gt_as_proposals=True),\n            mask_size=28,\n            pos_weight=-1,\n            debug=False)),\n    test_cfg=dict(\n        rpn=dict(\n            nms_pre=1000,\n            max_per_img=1000,\n            nms=dict(type='nms', iou_threshold=0.7),\n            min_bbox_size=0),\n        rcnn=dict(\n            score_thr=0.05,\n            nms=dict(type='nms', iou_threshold=0.5),\n            max_per_img=100,\n            mask_thr_binary=0.5)))\ndataset_type = 'CocoDataset'\ndata_root = './data/coco'\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations', with_bbox=True, with_mask=True),\n    dict(type='Resize', img_scale=(240, 180), keep_ratio=True),\n    dict(type='RandomFlip', flip_ratio=0.5),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='Pad', size_divisor=32),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels', 'gt_masks'])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(240, 180),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=1,\n    workers_per_gpu=1,\n    train=dict(\n        type='CocoDataset',\n        ann_file='./data/coco/train.json',\n        img_prefix='./data/coco/train/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True, with_mask=True),\n            dict(type='Resize', img_scale=(240, 180), keep_ratio=True),\n            dict(type='RandomFlip', flip_ratio=0.5),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='DefaultFormatBundle'),\n            dict(\n                type='Collect',\n                keys=['img', 'gt_bboxes', 'gt_labels', 'gt_masks'])\n        ]),\n    val=dict(\n        type='CocoDataset',\n        ann_file='./data/coco/val.json',\n        img_prefix='./data/coco/val/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(240, 180),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]),\n    test=dict(\n        type='CocoDataset',\n        ann_file='./data/coco/val.json',\n        img_prefix='./data/coco/val/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(240, 180),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]))\nevaluation = dict(metric=['bbox', 'segm'])\noptimizer = dict(type='SGD', lr=0.02, momentum=0.9, weight_decay=0.0001)\noptimizer_config = dict(grad_clip=None)\nlr_config = dict(\n    policy='step',\n    warmup='linear',\n    warmup_iters=500,\n    warmup_ratio=0.001,\n    step=[8, 11])\nrunner = dict(type='EpochBasedRunner', max_epochs=12)\ncheckpoint_config = dict(interval=1)\nlog_config = dict(interval=50, hooks=[dict(type='TextLoggerHook')])\ncustom_hooks = [dict(type='NumClassCheckHook')]\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = './mask_rcnn_r50_fpn_1x_coco_20200205-d4b0c5d6.pth'\nresume_from = None\nworkflow = [('train', 1)]\nopencv_num_threads = 0\nmp_start_method = 'fork'\nauto_scale_lr = dict(enable=False, base_batch_size=1)\nCLASSES = ('balloon', )\nwork_dir = 'ballon_test'\nauto_resume = False\ngpu_ids = [0]\n", "seed": 66592795, "exp_name": "mask_rcnn_r50_fpn_1x_voctest.py"}
{"mode": "train", "epoch": 1, "iter": 50, "lr": 0.00198, "memory": 1020, "data_time": 0.04395, "loss_rpn_cls": 0.12357, "loss_rpn_bbox": 0.0289, "loss_cls": 0.33851, "acc": 85.5, "loss_bbox": 0.36002, "loss_mask": 1.20725, "loss": 2.05824, "time": 0.13572}
{"mode": "val", "epoch": 1, "iter": 13, "lr": 0.00242, "bbox_mAP": 0.3206, "bbox_mAP_50": 0.4795, "bbox_mAP_75": 0.3805, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.0, "bbox_mAP_l": 0.4378, "bbox_mAP_copypaste": "0.3206 0.4795 0.3805 0.0000 0.0000 0.4378", "segm_mAP": 0.3777, "segm_mAP_50": 0.4707, "segm_mAP_75": 0.4628, "segm_mAP_s": 0.0, "segm_mAP_m": 0.0, "segm_mAP_l": 0.5165, "segm_mAP_copypaste": "0.3777 0.4707 0.4628 0.0000 0.0000 0.5165"}
{"mode": "train", "epoch": 2, "iter": 50, "lr": 0.00442, "memory": 2713, "data_time": 0.04333, "loss_rpn_cls": 0.02625, "loss_rpn_bbox": 0.02102, "loss_cls": 0.11114, "acc": 95.46484, "loss_bbox": 0.21256, "loss_mask": 0.23505, "loss": 0.60602, "time": 0.10545}
{"mode": "val", "epoch": 2, "iter": 13, "lr": 0.00486, "bbox_mAP": 0.3229, "bbox_mAP_50": 0.462, "bbox_mAP_75": 0.3666, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.0, "bbox_mAP_l": 0.4422, "bbox_mAP_copypaste": "0.3229 0.4620 0.3666 0.0000 0.0000 0.4422", "segm_mAP": 0.3624, "segm_mAP_50": 0.4761, "segm_mAP_75": 0.462, "segm_mAP_s": 0.0, "segm_mAP_m": 0.0, "segm_mAP_l": 0.4983, "segm_mAP_copypaste": "0.3624 0.4761 0.4620 0.0000 0.0000 0.4983"}
{"mode": "train", "epoch": 3, "iter": 50, "lr": 0.00685, "memory": 2713, "data_time": 0.04332, "loss_rpn_cls": 0.06074, "loss_rpn_bbox": 0.02726, "loss_cls": 0.14502, "acc": 94.81641, "loss_bbox": 0.16267, "loss_mask": 0.19683, "loss": 0.59252, "time": 0.10731}
{"mode": "val", "epoch": 3, "iter": 13, "lr": 0.00729, "bbox_mAP": 0.3393, "bbox_mAP_50": 0.5122, "bbox_mAP_75": 0.4246, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.0, "bbox_mAP_l": 0.4643, "bbox_mAP_copypaste": "0.3393 0.5122 0.4246 0.0000 0.0000 0.4643", "segm_mAP": 0.3836, "segm_mAP_50": 0.5021, "segm_mAP_75": 0.4817, "segm_mAP_s": 0.0, "segm_mAP_m": 0.0, "segm_mAP_l": 0.5258, "segm_mAP_copypaste": "0.3836 0.5021 0.4817 0.0000 0.0000 0.5258"}
{"mode": "train", "epoch": 4, "iter": 50, "lr": 0.00929, "memory": 2713, "data_time": 0.04279, "loss_rpn_cls": 0.03565, "loss_rpn_bbox": 0.02916, "loss_cls": 0.09255, "acc": 96.51172, "loss_bbox": 0.17019, "loss_mask": 0.18332, "loss": 0.51086, "time": 0.10382}
{"mode": "val", "epoch": 4, "iter": 13, "lr": 0.00973, "bbox_mAP": 0.2943, "bbox_mAP_50": 0.4399, "bbox_mAP_75": 0.3843, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.0, "bbox_mAP_l": 0.4046, "bbox_mAP_copypaste": "0.2943 0.4399 0.3843 0.0000 0.0000 0.4046", "segm_mAP": 0.3508, "segm_mAP_50": 0.4495, "segm_mAP_75": 0.3809, "segm_mAP_s": 0.0, "segm_mAP_m": 0.0, "segm_mAP_l": 0.4945, "segm_mAP_copypaste": "0.3508 0.4495 0.3809 0.0000 0.0000 0.4945"}
{"mode": "train", "epoch": 5, "iter": 50, "lr": 0.01173, "memory": 2713, "data_time": 0.04295, "loss_rpn_cls": 0.11929, "loss_rpn_bbox": 0.03778, "loss_cls": 0.14906, "acc": 95.12109, "loss_bbox": 0.16486, "loss_mask": 0.24812, "loss": 0.7191, "time": 0.10151}
{"mode": "val", "epoch": 5, "iter": 13, "lr": 0.01217, "bbox_mAP": 0.338, "bbox_mAP_50": 0.5278, "bbox_mAP_75": 0.4076, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.0, "bbox_mAP_l": 0.4667, "bbox_mAP_copypaste": "0.3380 0.5278 0.4076 0.0000 0.0000 0.4667", "segm_mAP": 0.3878, "segm_mAP_50": 0.5171, "segm_mAP_75": 0.4541, "segm_mAP_s": 0.0, "segm_mAP_m": 0.0, "segm_mAP_l": 0.5354, "segm_mAP_copypaste": "0.3878 0.5171 0.4541 0.0000 0.0000 0.5354"}
{"mode": "train", "epoch": 6, "iter": 50, "lr": 0.01417, "memory": 2713, "data_time": 0.04371, "loss_rpn_cls": 0.04986, "loss_rpn_bbox": 0.03117, "loss_cls": 0.10322, "acc": 96.08984, "loss_bbox": 0.14579, "loss_mask": 0.19942, "loss": 0.52946, "time": 0.10203}
{"mode": "val", "epoch": 6, "iter": 13, "lr": 0.01461, "bbox_mAP": 0.3141, "bbox_mAP_50": 0.4814, "bbox_mAP_75": 0.421, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.0, "bbox_mAP_l": 0.4308, "bbox_mAP_copypaste": "0.3141 0.4814 0.4210 0.0000 0.0000 0.4308", "segm_mAP": 0.3949, "segm_mAP_50": 0.4776, "segm_mAP_75": 0.4571, "segm_mAP_s": 0.0, "segm_mAP_m": 0.0, "segm_mAP_l": 0.5451, "segm_mAP_copypaste": "0.3949 0.4776 0.4571 0.0000 0.0000 0.5451"}
{"mode": "train", "epoch": 7, "iter": 50, "lr": 0.0166, "memory": 2713, "data_time": 0.04335, "loss_rpn_cls": 0.0452, "loss_rpn_bbox": 0.03534, "loss_cls": 0.10645, "acc": 95.8125, "loss_bbox": 0.16354, "loss_mask": 0.17857, "loss": 0.52909, "time": 0.10416}
{"mode": "val", "epoch": 7, "iter": 13, "lr": 0.01704, "bbox_mAP": 0.2436, "bbox_mAP_50": 0.5077, "bbox_mAP_75": 0.1916, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.0, "bbox_mAP_l": 0.3407, "bbox_mAP_copypaste": "0.2436 0.5077 0.1916 0.0000 0.0000 0.3407", "segm_mAP": 0.334, "segm_mAP_50": 0.5112, "segm_mAP_75": 0.444, "segm_mAP_s": 0.0, "segm_mAP_m": 0.0, "segm_mAP_l": 0.4735, "segm_mAP_copypaste": "0.3340 0.5112 0.4440 0.0000 0.0000 0.4735"}
{"mode": "train", "epoch": 8, "iter": 50, "lr": 0.01904, "memory": 2713, "data_time": 0.04324, "loss_rpn_cls": 0.03906, "loss_rpn_bbox": 0.03235, "loss_cls": 0.08305, "acc": 96.71484, "loss_bbox": 0.16052, "loss_mask": 0.17446, "loss": 0.48945, "time": 0.10408}
{"mode": "val", "epoch": 8, "iter": 13, "lr": 0.01948, "bbox_mAP": 0.2821, "bbox_mAP_50": 0.4405, "bbox_mAP_75": 0.3167, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.0, "bbox_mAP_l": 0.3859, "bbox_mAP_copypaste": "0.2821 0.4405 0.3167 0.0000 0.0000 0.3859", "segm_mAP": 0.3766, "segm_mAP_50": 0.4405, "segm_mAP_75": 0.4313, "segm_mAP_s": 0.0, "segm_mAP_m": 0.0, "segm_mAP_l": 0.5179, "segm_mAP_copypaste": "0.3766 0.4405 0.4313 0.0000 0.0000 0.5179"}
{"mode": "train", "epoch": 9, "iter": 50, "lr": 0.002, "memory": 2713, "data_time": 0.04295, "loss_rpn_cls": 0.06685, "loss_rpn_bbox": 0.03037, "loss_cls": 0.10725, "acc": 96.12891, "loss_bbox": 0.13197, "loss_mask": 0.13632, "loss": 0.47276, "time": 0.10417}
{"mode": "val", "epoch": 9, "iter": 13, "lr": 0.002, "bbox_mAP": 0.3902, "bbox_mAP_50": 0.4851, "bbox_mAP_75": 0.4721, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.0, "bbox_mAP_l": 0.5345, "bbox_mAP_copypaste": "0.3902 0.4851 0.4721 0.0000 0.0000 0.5345", "segm_mAP": 0.425, "segm_mAP_50": 0.4851, "segm_mAP_75": 0.4721, "segm_mAP_s": 0.0, "segm_mAP_m": 0.0, "segm_mAP_l": 0.5848, "segm_mAP_copypaste": "0.4250 0.4851 0.4721 0.0000 0.0000 0.5848"}
{"mode": "train", "epoch": 10, "iter": 50, "lr": 0.002, "memory": 2713, "data_time": 0.04377, "loss_rpn_cls": 0.01644, "loss_rpn_bbox": 0.02168, "loss_cls": 0.06332, "acc": 97.50391, "loss_bbox": 0.11667, "loss_mask": 0.12503, "loss": 0.34315, "time": 0.10713}
{"mode": "val", "epoch": 10, "iter": 13, "lr": 0.002, "bbox_mAP": 0.3996, "bbox_mAP_50": 0.5179, "bbox_mAP_75": 0.4906, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.0, "bbox_mAP_l": 0.5487, "bbox_mAP_copypaste": "0.3996 0.5179 0.4906 0.0000 0.0000 0.5487", "segm_mAP": 0.4379, "segm_mAP_50": 0.5179, "segm_mAP_75": 0.4772, "segm_mAP_s": 0.0, "segm_mAP_m": 0.0, "segm_mAP_l": 0.6021, "segm_mAP_copypaste": "0.4379 0.5179 0.4772 0.0000 0.0000 0.6021"}
{"mode": "train", "epoch": 11, "iter": 50, "lr": 0.002, "memory": 2713, "data_time": 0.04297, "loss_rpn_cls": 0.01587, "loss_rpn_bbox": 0.02046, "loss_cls": 0.06854, "acc": 97.5, "loss_bbox": 0.12105, "loss_mask": 0.11835, "loss": 0.34428, "time": 0.10821}
{"mode": "val", "epoch": 11, "iter": 13, "lr": 0.002, "bbox_mAP": 0.3908, "bbox_mAP_50": 0.509, "bbox_mAP_75": 0.4828, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.0, "bbox_mAP_l": 0.5378, "bbox_mAP_copypaste": "0.3908 0.5090 0.4828 0.0000 0.0000 0.5378", "segm_mAP": 0.4265, "segm_mAP_50": 0.509, "segm_mAP_75": 0.4721, "segm_mAP_s": 0.0, "segm_mAP_m": 0.0, "segm_mAP_l": 0.5874, "segm_mAP_copypaste": "0.4265 0.5090 0.4721 0.0000 0.0000 0.5874"}
{"mode": "train", "epoch": 12, "iter": 50, "lr": 0.0002, "memory": 2713, "data_time": 0.04297, "loss_rpn_cls": 0.01175, "loss_rpn_bbox": 0.01822, "loss_cls": 0.05304, "acc": 97.90234, "loss_bbox": 0.09481, "loss_mask": 0.10845, "loss": 0.28628, "time": 0.10615}
{"mode": "val", "epoch": 12, "iter": 13, "lr": 0.0002, "bbox_mAP": 0.4095, "bbox_mAP_50": 0.5222, "bbox_mAP_75": 0.494, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.0, "bbox_mAP_l": 0.5632, "bbox_mAP_copypaste": "0.4095 0.5222 0.4940 0.0000 0.0000 0.5632", "segm_mAP": 0.4359, "segm_mAP_50": 0.519, "segm_mAP_75": 0.4729, "segm_mAP_s": 0.0, "segm_mAP_m": 0.0, "segm_mAP_l": 0.6006, "segm_mAP_copypaste": "0.4359 0.5190 0.4729 0.0000 0.0000 0.6006"}
