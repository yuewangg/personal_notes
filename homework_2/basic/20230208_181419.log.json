{"env_info": "sys.platform: linux\nPython: 3.8.10 (default, Jun  4 2021, 15:09:15) [GCC 7.5.0]\nCUDA available: True\nGPU 0: NVIDIA GeForce RTX 3060 Laptop GPU\nCUDA_HOME: /usr/local/cuda\nNVCC: Cuda compilation tools, release 11.6, V11.6.55\nGCC: gcc (Ubuntu 9.4.0-1ubuntu1~20.04.1) 9.4.0\nPyTorch: 1.12.0\nPyTorch compiling details: PyTorch built with:\n  - GCC 9.3\n  - C++ Version: 201402\n  - Intel(R) oneAPI Math Kernel Library Version 2021.4-Product Build 20210904 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - LAPACK is enabled (usually provided by MKL)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 11.6\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=compute_37\n  - CuDNN 8.3.2  (built against CUDA 11.5)\n  - Magma 2.6.1\n  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.6, CUDNN_VERSION=8.3.2, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.12.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=OFF, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, \n\nTorchVision: 0.13.0\nOpenCV: 4.7.0\nMMCV: 1.7.1\nMMCV Compiler: GCC 9.3\nMMCV CUDA Compiler: 11.6\nMMDetection: 2.28.0+1b7d778", "config": "model = dict(\n    type='MaskRCNN',\n    backbone=dict(\n        type='ResNet',\n        depth=50,\n        num_stages=4,\n        out_indices=(0, 1, 2, 3),\n        frozen_stages=1,\n        norm_cfg=dict(type='BN', requires_grad=True),\n        norm_eval=True,\n        style='pytorch',\n        init_cfg=dict(type='Pretrained',\n                      checkpoint='./resnet50-0676ba61.pth')),\n    neck=dict(\n        type='FPN',\n        in_channels=[256, 512, 1024, 2048],\n        out_channels=256,\n        num_outs=5),\n    rpn_head=dict(\n        type='RPNHead',\n        in_channels=256,\n        feat_channels=256,\n        anchor_generator=dict(\n            type='AnchorGenerator',\n            scales=[8],\n            ratios=[0.5, 1.0, 2.0],\n            strides=[4, 8, 16, 32, 64]),\n        bbox_coder=dict(\n            type='DeltaXYWHBBoxCoder',\n            target_means=[0.0, 0.0, 0.0, 0.0],\n            target_stds=[1.0, 1.0, 1.0, 1.0]),\n        loss_cls=dict(\n            type='CrossEntropyLoss', use_sigmoid=True, loss_weight=1.0),\n        loss_bbox=dict(type='L1Loss', loss_weight=1.0)),\n    roi_head=dict(\n        type='StandardRoIHead',\n        bbox_roi_extractor=dict(\n            type='SingleRoIExtractor',\n            roi_layer=dict(type='RoIAlign', output_size=7, sampling_ratio=0),\n            out_channels=256,\n            featmap_strides=[4, 8, 16, 32]),\n        bbox_head=dict(\n            type='Shared2FCBBoxHead',\n            in_channels=256,\n            fc_out_channels=1024,\n            roi_feat_size=7,\n            num_classes=1,\n            bbox_coder=dict(\n                type='DeltaXYWHBBoxCoder',\n                target_means=[0.0, 0.0, 0.0, 0.0],\n                target_stds=[0.1, 0.1, 0.2, 0.2]),\n            reg_class_agnostic=False,\n            loss_cls=dict(\n                type='CrossEntropyLoss', use_sigmoid=False, loss_weight=1.0),\n            loss_bbox=dict(type='L1Loss', loss_weight=1.0)),\n        mask_roi_extractor=dict(\n            type='SingleRoIExtractor',\n            roi_layer=dict(type='RoIAlign', output_size=14, sampling_ratio=0),\n            out_channels=256,\n            featmap_strides=[4, 8, 16, 32]),\n        mask_head=dict(\n            type='FCNMaskHead',\n            num_convs=4,\n            in_channels=256,\n            conv_out_channels=256,\n            num_classes=1,\n            loss_mask=dict(\n                type='CrossEntropyLoss', use_mask=True, loss_weight=1.0))),\n    train_cfg=dict(\n        rpn=dict(\n            assigner=dict(\n                type='MaxIoUAssigner',\n                pos_iou_thr=0.7,\n                neg_iou_thr=0.3,\n                min_pos_iou=0.3,\n                match_low_quality=True,\n                ignore_iof_thr=-1),\n            sampler=dict(\n                type='RandomSampler',\n                num=256,\n                pos_fraction=0.5,\n                neg_pos_ub=-1,\n                add_gt_as_proposals=False),\n            allowed_border=-1,\n            pos_weight=-1,\n            debug=False),\n        rpn_proposal=dict(\n            nms_pre=2000,\n            max_per_img=1000,\n            nms=dict(type='nms', iou_threshold=0.7),\n            min_bbox_size=0),\n        rcnn=dict(\n            assigner=dict(\n                type='MaxIoUAssigner',\n                pos_iou_thr=0.5,\n                neg_iou_thr=0.5,\n                min_pos_iou=0.5,\n                match_low_quality=True,\n                ignore_iof_thr=-1),\n            sampler=dict(\n                type='RandomSampler',\n                num=512,\n                pos_fraction=0.25,\n                neg_pos_ub=-1,\n                add_gt_as_proposals=True),\n            mask_size=28,\n            pos_weight=-1,\n            debug=False)),\n    test_cfg=dict(\n        rpn=dict(\n            nms_pre=1000,\n            max_per_img=1000,\n            nms=dict(type='nms', iou_threshold=0.7),\n            min_bbox_size=0),\n        rcnn=dict(\n            score_thr=0.05,\n            nms=dict(type='nms', iou_threshold=0.5),\n            max_per_img=100,\n            mask_thr_binary=0.5)))\ndataset_type = 'CocoDataset'\ndata_root = './data/coco'\nCLASSES = ('balloon', )\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations', with_bbox=True, with_mask=True),\n    dict(type='Resize', img_scale=(640, 480), keep_ratio=True),\n    dict(type='RandomFlip', flip_ratio=0.5),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='Pad', size_divisor=32),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels', 'gt_masks'])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(640, 480),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=1,\n    workers_per_gpu=1,\n    train=dict(\n        type='CocoDataset',\n        ann_file='./data/coco/train.json',\n        img_prefix='./data/coco/train/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True, with_mask=True),\n            dict(type='Resize', img_scale=(640, 480), keep_ratio=True),\n            dict(type='RandomFlip', flip_ratio=0.5),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='DefaultFormatBundle'),\n            dict(\n                type='Collect',\n                keys=['img', 'gt_bboxes', 'gt_labels', 'gt_masks'])\n        ]),\n    val=dict(\n        type='CocoDataset',\n        ann_file='./data/coco/val.json',\n        img_prefix='./data/coco/val/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(640, 480),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]),\n    test=dict(\n        type='CocoDataset',\n        ann_file='./data/coco/val.json',\n        img_prefix='./data/coco/val/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(640, 480),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]))\nevaluation = dict(metric=['bbox', 'segm'])\noptimizer = dict(type='SGD', lr=0.02, momentum=0.9, weight_decay=0.0001)\noptimizer_config = dict(grad_clip=None)\nlr_config = dict(\n    policy='step',\n    warmup='linear',\n    warmup_iters=500,\n    warmup_ratio=0.001,\n    step=[8, 11])\nrunner = dict(type='EpochBasedRunner', max_epochs=12)\ncheckpoint_config = dict(interval=1)\nlog_config = dict(interval=50, hooks=[dict(type='TextLoggerHook')])\ncustom_hooks = [dict(type='NumClassCheckHook')]\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = './mask_rcnn_r50_fpn_1x_coco_20200205-d4b0c5d6.pth'\nresume_from = None\nworkflow = [('train', 1)]\nopencv_num_threads = 0\nmp_start_method = 'fork'\nauto_scale_lr = dict(enable=True, base_batch_size=16)\nwork_dir = 'demo_test'\nauto_resume = False\ngpu_ids = range(0, 1)\n", "seed": 1222916159, "exp_name": "config.py"}
{"mode": "train", "epoch": 1, "iter": 50, "lr": 0.00012, "memory": 1328, "data_time": 0.04498, "loss_rpn_cls": 0.07796, "loss_rpn_bbox": 0.01357, "loss_cls": 0.50932, "acc": 72.65625, "loss_bbox": 0.30162, "loss_mask": 0.29531, "loss": 1.19777, "time": 0.17766}
{"mode": "val", "epoch": 1, "iter": 13, "lr": 0.00015, "bbox_mAP": 0.0958, "bbox_mAP_50": 0.1631, "bbox_mAP_75": 0.0903, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.0187, "bbox_mAP_l": 0.1418, "bbox_mAP_copypaste": "0.0958 0.1631 0.0903 0.0000 0.0187 0.1418", "segm_mAP": 0.1271, "segm_mAP_50": 0.167, "segm_mAP_75": 0.1486, "segm_mAP_s": 0.0, "segm_mAP_m": 0.0175, "segm_mAP_l": 0.3295, "segm_mAP_copypaste": "0.1271 0.1670 0.1486 0.0000 0.0175 0.3295"}
{"mode": "train", "epoch": 2, "iter": 50, "lr": 0.00028, "memory": 2902, "data_time": 0.04494, "loss_rpn_cls": 0.04275, "loss_rpn_bbox": 0.01157, "loss_cls": 0.20902, "acc": 90.62109, "loss_bbox": 0.34277, "loss_mask": 0.13146, "loss": 0.73756, "time": 0.14919}
{"mode": "val", "epoch": 2, "iter": 13, "lr": 0.0003, "bbox_mAP": 0.5226, "bbox_mAP_50": 0.7004, "bbox_mAP_75": 0.5865, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.2834, "bbox_mAP_l": 0.6357, "bbox_mAP_copypaste": "0.5226 0.7004 0.5865 0.0000 0.2834 0.6357", "segm_mAP": 0.606, "segm_mAP_50": 0.708, "segm_mAP_75": 0.6866, "segm_mAP_s": 0.004, "segm_mAP_m": 0.318, "segm_mAP_l": 0.7324, "segm_mAP_copypaste": "0.6060 0.7080 0.6866 0.0040 0.3180 0.7324"}
{"mode": "train", "epoch": 3, "iter": 50, "lr": 0.00043, "memory": 2902, "data_time": 0.04542, "loss_rpn_cls": 0.02034, "loss_rpn_bbox": 0.00954, "loss_cls": 0.12159, "acc": 96.0, "loss_bbox": 0.26615, "loss_mask": 0.10754, "loss": 0.52516, "time": 0.15045}
{"mode": "val", "epoch": 3, "iter": 13, "lr": 0.00046, "bbox_mAP": 0.639, "bbox_mAP_50": 0.8009, "bbox_mAP_75": 0.749, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.4404, "bbox_mAP_l": 0.7316, "bbox_mAP_copypaste": "0.6390 0.8009 0.7490 0.0000 0.4404 0.7316", "segm_mAP": 0.6759, "segm_mAP_50": 0.7977, "segm_mAP_75": 0.7598, "segm_mAP_s": 0.0084, "segm_mAP_m": 0.4456, "segm_mAP_l": 0.774, "segm_mAP_copypaste": "0.6759 0.7977 0.7598 0.0084 0.4456 0.7740"}
{"mode": "train", "epoch": 4, "iter": 50, "lr": 0.00058, "memory": 2902, "data_time": 0.04481, "loss_rpn_cls": 0.01221, "loss_rpn_bbox": 0.00922, "loss_cls": 0.08251, "acc": 97.08594, "loss_bbox": 0.12667, "loss_mask": 0.09278, "loss": 0.32339, "time": 0.15143}
{"mode": "val", "epoch": 4, "iter": 13, "lr": 0.00061, "bbox_mAP": 0.6448, "bbox_mAP_50": 0.8332, "bbox_mAP_75": 0.7592, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.4546, "bbox_mAP_l": 0.7234, "bbox_mAP_copypaste": "0.6448 0.8332 0.7592 0.0000 0.4546 0.7234", "segm_mAP": 0.7031, "segm_mAP_50": 0.822, "segm_mAP_75": 0.7877, "segm_mAP_s": 0.0, "segm_mAP_m": 0.4665, "segm_mAP_l": 0.7906, "segm_mAP_copypaste": "0.7031 0.8220 0.7877 0.0000 0.4665 0.7906"}
{"mode": "train", "epoch": 5, "iter": 50, "lr": 0.00073, "memory": 2902, "data_time": 0.04502, "loss_rpn_cls": 0.00826, "loss_rpn_bbox": 0.01064, "loss_cls": 0.08154, "acc": 96.94141, "loss_bbox": 0.11884, "loss_mask": 0.09423, "loss": 0.31352, "time": 0.15647}
{"mode": "val", "epoch": 5, "iter": 13, "lr": 0.00076, "bbox_mAP": 0.6081, "bbox_mAP_50": 0.8324, "bbox_mAP_75": 0.7152, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.4074, "bbox_mAP_l": 0.6806, "bbox_mAP_copypaste": "0.6081 0.8324 0.7152 0.0000 0.4074 0.6806", "segm_mAP": 0.6742, "segm_mAP_50": 0.796, "segm_mAP_75": 0.7395, "segm_mAP_s": 0.0, "segm_mAP_m": 0.4507, "segm_mAP_l": 0.7555, "segm_mAP_copypaste": "0.6742 0.7960 0.7395 0.0000 0.4507 0.7555"}
{"mode": "train", "epoch": 6, "iter": 50, "lr": 0.00089, "memory": 2902, "data_time": 0.04564, "loss_rpn_cls": 0.00481, "loss_rpn_bbox": 0.00978, "loss_cls": 0.06924, "acc": 97.37109, "loss_bbox": 0.1039, "loss_mask": 0.08838, "loss": 0.27611, "time": 0.155}
{"mode": "val", "epoch": 6, "iter": 13, "lr": 0.00091, "bbox_mAP": 0.6611, "bbox_mAP_50": 0.8534, "bbox_mAP_75": 0.7613, "bbox_mAP_s": 0.0126, "bbox_mAP_m": 0.4462, "bbox_mAP_l": 0.7473, "bbox_mAP_copypaste": "0.6611 0.8534 0.7613 0.0126 0.4462 0.7473", "segm_mAP": 0.6975, "segm_mAP_50": 0.8356, "segm_mAP_75": 0.7564, "segm_mAP_s": 0.0092, "segm_mAP_m": 0.4281, "segm_mAP_l": 0.7987, "segm_mAP_copypaste": "0.6975 0.8356 0.7564 0.0092 0.4281 0.7987"}
{"mode": "train", "epoch": 7, "iter": 50, "lr": 0.00104, "memory": 2902, "data_time": 0.04561, "loss_rpn_cls": 0.00479, "loss_rpn_bbox": 0.01009, "loss_cls": 0.06977, "acc": 97.3125, "loss_bbox": 0.1106, "loss_mask": 0.08875, "loss": 0.284, "time": 0.15698}
{"mode": "val", "epoch": 7, "iter": 13, "lr": 0.00107, "bbox_mAP": 0.6729, "bbox_mAP_50": 0.8489, "bbox_mAP_75": 0.7941, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.455, "bbox_mAP_l": 0.7535, "bbox_mAP_copypaste": "0.6729 0.8489 0.7941 0.0000 0.4550 0.7535", "segm_mAP": 0.7059, "segm_mAP_50": 0.8317, "segm_mAP_75": 0.7635, "segm_mAP_s": 0.0, "segm_mAP_m": 0.4656, "segm_mAP_l": 0.7957, "segm_mAP_copypaste": "0.7059 0.8317 0.7635 0.0000 0.4656 0.7957"}
{"mode": "train", "epoch": 8, "iter": 50, "lr": 0.00119, "memory": 2902, "data_time": 0.04483, "loss_rpn_cls": 0.00388, "loss_rpn_bbox": 0.00832, "loss_cls": 0.05854, "acc": 97.71094, "loss_bbox": 0.09773, "loss_mask": 0.08931, "loss": 0.25778, "time": 0.15511}
{"mode": "val", "epoch": 8, "iter": 13, "lr": 0.00122, "bbox_mAP": 0.6388, "bbox_mAP_50": 0.8429, "bbox_mAP_75": 0.7596, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.4454, "bbox_mAP_l": 0.7228, "bbox_mAP_copypaste": "0.6388 0.8429 0.7596 0.0000 0.4454 0.7228", "segm_mAP": 0.6815, "segm_mAP_50": 0.8429, "segm_mAP_75": 0.7459, "segm_mAP_s": 0.0, "segm_mAP_m": 0.4328, "segm_mAP_l": 0.7829, "segm_mAP_copypaste": "0.6815 0.8429 0.7459 0.0000 0.4328 0.7829"}
{"mode": "train", "epoch": 9, "iter": 50, "lr": 0.00013, "memory": 2902, "data_time": 0.04504, "loss_rpn_cls": 0.00292, "loss_rpn_bbox": 0.00872, "loss_cls": 0.05544, "acc": 97.98828, "loss_bbox": 0.08922, "loss_mask": 0.07726, "loss": 0.23356, "time": 0.15486}
{"mode": "val", "epoch": 9, "iter": 13, "lr": 0.00013, "bbox_mAP": 0.6709, "bbox_mAP_50": 0.8528, "bbox_mAP_75": 0.7648, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.4139, "bbox_mAP_l": 0.7594, "bbox_mAP_copypaste": "0.6709 0.8528 0.7648 0.0000 0.4139 0.7594", "segm_mAP": 0.7009, "segm_mAP_50": 0.8528, "segm_mAP_75": 0.7554, "segm_mAP_s": 0.0, "segm_mAP_m": 0.3942, "segm_mAP_l": 0.8087, "segm_mAP_copypaste": "0.7009 0.8528 0.7554 0.0000 0.3942 0.8087"}
{"mode": "train", "epoch": 10, "iter": 50, "lr": 0.00013, "memory": 2902, "data_time": 0.04593, "loss_rpn_cls": 0.00325, "loss_rpn_bbox": 0.00685, "loss_cls": 0.04882, "acc": 98.11719, "loss_bbox": 0.07112, "loss_mask": 0.06809, "loss": 0.19812, "time": 0.15531}
{"mode": "val", "epoch": 10, "iter": 13, "lr": 0.00013, "bbox_mAP": 0.6802, "bbox_mAP_50": 0.853, "bbox_mAP_75": 0.7633, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.4315, "bbox_mAP_l": 0.7683, "bbox_mAP_copypaste": "0.6802 0.8530 0.7633 0.0000 0.4315 0.7683", "segm_mAP": 0.7011, "segm_mAP_50": 0.8302, "segm_mAP_75": 0.7552, "segm_mAP_s": 0.0, "segm_mAP_m": 0.3896, "segm_mAP_l": 0.8065, "segm_mAP_copypaste": "0.7011 0.8302 0.7552 0.0000 0.3896 0.8065"}
{"mode": "train", "epoch": 11, "iter": 50, "lr": 0.00013, "memory": 2902, "data_time": 0.04523, "loss_rpn_cls": 0.00275, "loss_rpn_bbox": 0.0073, "loss_cls": 0.05024, "acc": 98.07031, "loss_bbox": 0.0727, "loss_mask": 0.06976, "loss": 0.20276, "time": 0.15471}
{"mode": "val", "epoch": 11, "iter": 13, "lr": 0.00013, "bbox_mAP": 0.6697, "bbox_mAP_50": 0.8526, "bbox_mAP_75": 0.7615, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.433, "bbox_mAP_l": 0.7544, "bbox_mAP_copypaste": "0.6697 0.8526 0.7615 0.0000 0.4330 0.7544", "segm_mAP": 0.6968, "segm_mAP_50": 0.8303, "segm_mAP_75": 0.7547, "segm_mAP_s": 0.0, "segm_mAP_m": 0.3886, "segm_mAP_l": 0.8005, "segm_mAP_copypaste": "0.6968 0.8303 0.7547 0.0000 0.3886 0.8005"}
{"mode": "train", "epoch": 12, "iter": 50, "lr": 1e-05, "memory": 2902, "data_time": 0.04515, "loss_rpn_cls": 0.00219, "loss_rpn_bbox": 0.00669, "loss_cls": 0.04764, "acc": 98.20312, "loss_bbox": 0.06889, "loss_mask": 0.07043, "loss": 0.19585, "time": 0.15447}
{"mode": "val", "epoch": 12, "iter": 13, "lr": 1e-05, "bbox_mAP": 0.6754, "bbox_mAP_50": 0.8526, "bbox_mAP_75": 0.7623, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.437, "bbox_mAP_l": 0.7602, "bbox_mAP_copypaste": "0.6754 0.8526 0.7623 0.0000 0.4370 0.7602", "segm_mAP": 0.7014, "segm_mAP_50": 0.8303, "segm_mAP_75": 0.7552, "segm_mAP_s": 0.0, "segm_mAP_m": 0.3913, "segm_mAP_l": 0.8061, "segm_mAP_copypaste": "0.7014 0.8303 0.7552 0.0000 0.3913 0.8061"}
